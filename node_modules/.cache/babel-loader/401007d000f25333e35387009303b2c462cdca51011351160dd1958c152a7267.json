{"ast":null,"code":"export default {\n  name: 'ChangeElementsComponent',\n  data() {\n    return {\n      showColorPicker: false,\n      skyboxColorInput: '#333333',\n      floorColorInput: '#333333',\n      // Add a data property for floor color\n      floors: ['pinkfloor1.glb', 'pinkfloor2.glb', 'bathroomfloor.glb', 'scififloor.glb'],\n      currentFloorIndex: 0,\n      isHDREnabled: true,\n      isFloorVisible: true,\n      skyboxMetalness: 0.5,\n      // Default value or initial value\n      skyboxRoughness: 0.3,\n      skyboxClearcoat: 0.9,\n      skyboxClearcoatRoughness: 0.2,\n      skyboxReflectivity: 0.5\n    };\n  },\n  methods: {\n    emitSkyboxPropertyChange(property, value) {\n      this.$emit('changeSkyboxProperty', {\n        property,\n        value\n      });\n      console.log('emitted properties skybox');\n    },\n    toggleHDR() {\n      this.$emit('toggle-hdr', this.isHDREnabled);\n    },\n    toggleFloor() {\n      this.$emit('toggle-floor', this.isFloorVisible);\n    },\n    changeHDR() {\n      this.$emit('changeHdr');\n    },\n    changeFloor() {\n      // Update the current floor index\n      this.currentFloorIndex = (this.currentFloorIndex + 1) % this.floors.length;\n      // Emit the changeFloor event with the selected floor identifier\n      this.$emit('changeFloor', this.floors[this.currentFloorIndex]);\n    },\n    changeFloorType() {\n      // Emit the changeFloor event when the button is clicked\n      this.$emit('changeFloor');\n    },\n    changeSkybox() {\n      this.$emit('changeSkybox');\n    },\n    // No changes needed here, continue emitting the color change event\n    // Emit the changeSkyboxColor event when the button is clicked\n    changeSkyboxColor() {\n      // Get the color value from the input field (skyboxColorInput)\n      const colorHex = this.skyboxColorInput || \"#e8e8e8\"; // Use the input value or default to black\n\n      // Emit the changeSkyboxColor event with the selected color\n      this.$emit(\"changeSkyboxColor\", colorHex);\n    }\n\n    // Emit the changeFloorColor event when the button is clicked\n  },\n\n  watch: {\n    floorColorInput(newColor) {\n      if (/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(newColor)) {\n        // Valid hex code\n        this.$emit(\"changeFloorColor\", newColor);\n      } else {\n        console.warn('Invalid floor color hex:', newColor);\n      }\n    },\n    skyboxColorInput(newValue) {\n      this.$emit('changeSkyboxColor', newValue); // Automatically emit color change for skybox\n    }\n  }\n};","map":{"version":3,"names":["name","data","showColorPicker","skyboxColorInput","floorColorInput","floors","currentFloorIndex","isHDREnabled","isFloorVisible","skyboxMetalness","skyboxRoughness","skyboxClearcoat","skyboxClearcoatRoughness","skyboxReflectivity","methods","emitSkyboxPropertyChange","property","value","$emit","console","log","toggleHDR","toggleFloor","changeHDR","changeFloor","length","changeFloorType","changeSkybox","changeSkyboxColor","colorHex","watch","newColor","test","warn","newValue"],"sources":["/Users/max/Documents/3dprintprice/src/components/ChangeElementsComponent.vue"],"sourcesContent":["<template>\n  <div class=\"change\">\n    <v-btn variant=\"tonal\" size=\"small\" @click=\"changeHDR\">Change HDR</v-btn>\n    <v-btn variant=\"tonal\" size=\"small\" @click=\"changeFloor\">Change Floor</v-btn>\n    <v-btn variant=\"tonal\" size=\"small\" @click=\"changeSkybox\">Change Skybox</v-btn>\n    <div>\n    <!-- Existing color picker for skybox color -->\n    <span class =\"changecolor\">  \n      Choose Background Color  \n      <input type=\"color\" v-model=\"skyboxColorInput\" />\n    </span>\n\n    <!-- Sliders for skybox material properties -->\n    <v-slider\n      v-model=\"skyboxMetalness\"\n      @input=\"emitSkyboxPropertyChange('metalness', skyboxMetalness)\"\n      :min=\"0\"\n      :max=\"1\"\n      step=\"0.1\"\n      label=\"Metalness\"\n    ></v-slider>\n    <v-slider\n      v-model=\"skyboxRoughness\"\n      @input=\"emitSkyboxPropertyChange('roughness', skyboxRoughness)\"\n      :min=\"0\"\n      :max=\"1\"\n      step=\"0.1\"\n      label=\"Roughness\"\n    ></v-slider>\n    <v-slider\n      v-model=\"skyboxClearcoat\"\n      @input=\"emitSkyboxPropertyChange('clearcoat', skyboxClearcoat)\"\n      :min=\"0\"\n      :max=\"1\"\n      step=\"0.1\"\n      label=\"Clearcoat\"\n    ></v-slider>\n    <v-slider\n      v-model=\"skyboxClearcoatRoughness\"\n      @input=\"emitSkyboxPropertyChange('clearcoatRoughness', skyboxClearcoaRoughness)\"\n      :min=\"0\"\n      :max=\"1\"\n      step=\"0.1\"\n      label=\"Clearcoat Roughness\"\n    ></v-slider><v-slider\n      v-model=\"skyboxReflectivity\"\n      @input=\"emitSkyboxPropertyChange('reflectivity', skyboxReflectivity)\"\n      :min=\"0\"\n      :max=\"1\"\n      step=\"0.1\"\n      label=\"Reflectivity\"\n    ></v-slider>\n  </div>\n\n<div>\n    <!-- Input field for the hexadecimal color value of the floor -->\n    <span class =\"changecolor\">  Choose Floor Color <input type=\"color\" v-model=\"floorColorInput\" />\n    <!-- <v-btn variant=\"tonal\" size=\"small\" @click=\"changeFloorColor\">Change Floor Color</v-btn> -->\n  </span>\n</div>\n\n<v-row>\n    <v-col cols=\"12\" sm=\"6\">\n      <v-checkbox\n        v-model=\"isHDREnabled\"\n        :label=\"'Enable HDR'\"\n        @change=\"toggleHDR\"\n      ></v-checkbox>\n    </v-col>\n    <v-col cols=\"12\" sm=\"6\">\n      <v-checkbox\n        v-model=\"isFloorVisible\"\n        :label=\"'Show Floor'\"\n        @change=\"toggleFloor\"\n      ></v-checkbox>\n    </v-col>\n  </v-row>\n\n</div>\n</template>\n\n\n<script>\nexport default {\n  name: 'ChangeElementsComponent',\n  data() {\n    return {\n      showColorPicker: false,\n      skyboxColorInput: '#333333',\n      floorColorInput: '#333333', // Add a data property for floor color\n      floors: ['pinkfloor1.glb', 'pinkfloor2.glb', 'bathroomfloor.glb', 'scififloor.glb'],\n      currentFloorIndex: 0,\n      isHDREnabled: true,\n      isFloorVisible: true,\n      skyboxMetalness: 0.5, // Default value or initial value\n      skyboxRoughness: 0.3,\n      skyboxClearcoat: 0.9,\n      skyboxClearcoatRoughness: 0.2,\n      skyboxReflectivity: 0.5,\n    };\n  },\n  methods: {\n\n    emitSkyboxPropertyChange(property, value) {\n    this.$emit('changeSkyboxProperty', { property, value });\n    console.log('emitted properties skybox')\n  },\n\n    toggleHDR() {\n      this.$emit('toggle-hdr', this.isHDREnabled);\n    },\n    toggleFloor() {\n      this.$emit('toggle-floor', this.isFloorVisible);\n    },\n\n    changeHDR() {\n      this.$emit('changeHdr');\n    },\n    changeFloor() {\n// Update the current floor index\nthis.currentFloorIndex = (this.currentFloorIndex + 1) % this.floors.length;\n// Emit the changeFloor event with the selected floor identifier\nthis.$emit('changeFloor', this.floors[this.currentFloorIndex]);\n},\n\nchangeFloorType() {\n  // Emit the changeFloor event when the button is clicked\n  this.$emit('changeFloor');\n},\n    changeSkybox() {\n      this.$emit('changeSkybox');\n    },\n    // No changes needed here, continue emitting the color change event\n  // Emit the changeSkyboxColor event when the button is clicked\n  changeSkyboxColor() {\n  // Get the color value from the input field (skyboxColorInput)\n  const colorHex = this.skyboxColorInput || \"#e8e8e8\"; // Use the input value or default to black\n\n  // Emit the changeSkyboxColor event with the selected color\n  this.$emit(\"changeSkyboxColor\", colorHex);\n},\n\n// Emit the changeFloorColor event when the button is clicked\n},\nwatch: {\n  floorColorInput(newColor) {\n    if (/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(newColor)) {\n      // Valid hex code\n      this.$emit(\"changeFloorColor\", newColor);\n    } else {\n      console.warn('Invalid floor color hex:', newColor);\n    }\n  },\n\n  skyboxColorInput(newValue) {\n      this.$emit('changeSkyboxColor', newValue); // Automatically emit color change for skybox\n    },\n},\n  };\n</script>\n\n<style>\n.change{\nalign-content: space-evenly;\n}\n.v-btn {\nmargin: 0.5rem;\n}\n\n.changecolor {\n  padding: 1em;\n}\n</style>\n"],"mappings":"AAmFA,eAAe;EACbA,IAAI,EAAE,yBAAyB;EAC/BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,eAAe,EAAE,KAAK;MACtBC,gBAAgB,EAAE,SAAS;MAC3BC,eAAe,EAAE,SAAS;MAAE;MAC5BC,MAAM,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,gBAAgB,CAAC;MACnFC,iBAAiB,EAAE,CAAC;MACpBC,YAAY,EAAE,IAAI;MAClBC,cAAc,EAAE,IAAI;MACpBC,eAAe,EAAE,GAAG;MAAE;MACtBC,eAAe,EAAE,GAAG;MACpBC,eAAe,EAAE,GAAG;MACpBC,wBAAwB,EAAE,GAAG;MAC7BC,kBAAkB,EAAE;IACtB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IAEPC,wBAAwBA,CAACC,QAAQ,EAAEC,KAAK,EAAE;MAC1C,IAAI,CAACC,KAAK,CAAC,sBAAsB,EAAE;QAAEF,QAAQ;QAAEC;MAAM,CAAC,CAAC;MACvDE,OAAO,CAACC,GAAG,CAAC,2BAA2B;IACzC,CAAC;IAECC,SAASA,CAAA,EAAG;MACV,IAAI,CAACH,KAAK,CAAC,YAAY,EAAE,IAAI,CAACX,YAAY,CAAC;IAC7C,CAAC;IACDe,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACJ,KAAK,CAAC,cAAc,EAAE,IAAI,CAACV,cAAc,CAAC;IACjD,CAAC;IAEDe,SAASA,CAAA,EAAG;MACV,IAAI,CAACL,KAAK,CAAC,WAAW,CAAC;IACzB,CAAC;IACDM,WAAWA,CAAA,EAAG;MAClB;MACA,IAAI,CAAClB,iBAAgB,GAAI,CAAC,IAAI,CAACA,iBAAgB,GAAI,CAAC,IAAI,IAAI,CAACD,MAAM,CAACoB,MAAM;MAC1E;MACA,IAAI,CAACP,KAAK,CAAC,aAAa,EAAE,IAAI,CAACb,MAAM,CAAC,IAAI,CAACC,iBAAiB,CAAC,CAAC;IAC9D,CAAC;IAEDoB,eAAeA,CAAA,EAAG;MAChB;MACA,IAAI,CAACR,KAAK,CAAC,aAAa,CAAC;IAC3B,CAAC;IACGS,YAAYA,CAAA,EAAG;MACb,IAAI,CAACT,KAAK,CAAC,cAAc,CAAC;IAC5B,CAAC;IACD;IACF;IACAU,iBAAiBA,CAAA,EAAG;MACpB;MACA,MAAMC,QAAO,GAAI,IAAI,CAAC1B,gBAAe,IAAK,SAAS,EAAE;;MAErD;MACA,IAAI,CAACe,KAAK,CAAC,mBAAmB,EAAEW,QAAQ,CAAC;IAC3C;;IAEA;EACA,CAAC;;EACDC,KAAK,EAAE;IACL1B,eAAeA,CAAC2B,QAAQ,EAAE;MACxB,IAAI,oCAAoC,CAACC,IAAI,CAACD,QAAQ,CAAC,EAAE;QACvD;QACA,IAAI,CAACb,KAAK,CAAC,kBAAkB,EAAEa,QAAQ,CAAC;MAC1C,OAAO;QACLZ,OAAO,CAACc,IAAI,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;MACpD;IACF,CAAC;IAED5B,gBAAgBA,CAAC+B,QAAQ,EAAE;MACvB,IAAI,CAAChB,KAAK,CAAC,mBAAmB,EAAEgB,QAAQ,CAAC,EAAE;IAC7C;EACJ;AACE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}