{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"change\"\n};\nconst _hoisted_2 = {\n  class: \"changecolor\"\n};\nconst _hoisted_3 = {\n  class: \"changecolor\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_slider = _resolveComponent(\"v-slider\");\n  const _component_v_checkbox = _resolveComponent(\"v-checkbox\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_v_btn, {\n    variant: \"tonal\",\n    size: \"small\",\n    onClick: $options.changeHDR\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Change HDR\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_v_btn, {\n    variant: \"tonal\",\n    size: \"small\",\n    onClick: $options.changeFloor\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Change Floor\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_v_btn, {\n    variant: \"tonal\",\n    size: \"small\",\n    onClick: $options.changeSkybox\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Change Skybox\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createElementVNode(\"div\", null, [_createCommentVNode(\" Existing color picker for skybox color \"), _createElementVNode(\"span\", _hoisted_2, [_createTextVNode(\" Choose Background Color \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"color\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.skyboxColorInput = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.skyboxColorInput]])]), _createCommentVNode(\" Sliders for skybox material properties \"), _createVNode(_component_v_slider, {\n    modelValue: $data.skyboxMetalness,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.skyboxMetalness = $event),\n    onInput: _cache[2] || (_cache[2] = $event => $options.emitSkyboxPropertyChange('metalness', $data.skyboxMetalness)),\n    min: 0,\n    max: 1,\n    step: \"0.1\",\n    label: \"Metalness\"\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_slider, {\n    modelValue: $data.skyboxRoughness,\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.skyboxRoughness = $event),\n    onInput: _cache[4] || (_cache[4] = $event => $options.emitSkyboxPropertyChange('roughness', $data.skyboxRoughness)),\n    min: 0,\n    max: 1,\n    step: \"0.1\",\n    label: \"Roughness\"\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_slider, {\n    modelValue: $data.skyboxClearcoat,\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.skyboxClearcoat = $event),\n    onInput: _cache[6] || (_cache[6] = $event => $options.emitSkyboxPropertyChange('clearcoat', $data.skyboxClearcoat)),\n    min: 0,\n    max: 1,\n    step: \"0.1\",\n    label: \"Clearcoat\"\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_slider, {\n    modelValue: $data.skyboxClearcoatRoughness,\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $data.skyboxClearcoatRoughness = $event),\n    onInput: _cache[8] || (_cache[8] = $event => $options.emitSkyboxPropertyChange('clearcoatRoughness', _ctx.skyboxClearcoaRoughness)),\n    min: 0,\n    max: 1,\n    step: \"0.1\",\n    label: \"Clearcoat Roughness\"\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_slider, {\n    modelValue: $data.skyboxReflectivity,\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $data.skyboxReflectivity = $event),\n    onInput: _cache[10] || (_cache[10] = $event => $options.emitSkyboxPropertyChange('reflectivity', $data.skyboxReflectivity)),\n    min: 0,\n    max: 1,\n    step: \"0.1\",\n    label: \"Reflectivity\"\n  }, null, 8 /* PROPS */, [\"modelValue\"])]), _createElementVNode(\"div\", null, [_createCommentVNode(\" Input field for the hexadecimal color value of the floor \"), _createElementVNode(\"span\", _hoisted_3, [_createTextVNode(\" Choose Floor Color \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"color\",\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => $data.floorColorInput = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.floorColorInput]]), _createCommentVNode(\" <v-btn variant=\\\"tonal\\\" size=\\\"small\\\" @click=\\\"changeFloorColor\\\">Change Floor Color</v-btn> \")])]), _createVNode(_component_v_row, null, {\n    default: _withCtx(() => [_createVNode(_component_v_col, {\n      cols: \"12\",\n      sm: \"6\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_checkbox, {\n        modelValue: $data.isHDREnabled,\n        \"onUpdate:modelValue\": _cache[12] || (_cache[12] = $event => $data.isHDREnabled = $event),\n        label: 'Enable HDR',\n        onChange: $options.toggleHDR\n      }, null, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_v_col, {\n      cols: \"12\",\n      sm: \"6\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_checkbox, {\n        modelValue: $data.isFloorVisible,\n        \"onUpdate:modelValue\": _cache[13] || (_cache[13] = $event => $data.isFloorVisible = $event),\n        label: 'Show Floor',\n        onChange: $options.toggleFloor\n      }, null, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_v_btn","variant","size","onClick","$options","changeHDR","changeFloor","changeSkybox","_createElementVNode","_createCommentVNode","_hoisted_2","type","$data","skyboxColorInput","$event","_component_v_slider","skyboxMetalness","onInput","_cache","emitSkyboxPropertyChange","min","max","step","label","skyboxRoughness","skyboxClearcoat","skyboxClearcoatRoughness","_ctx","skyboxClearcoaRoughness","skyboxReflectivity","_hoisted_3","floorColorInput","_component_v_row","_component_v_col","cols","sm","_component_v_checkbox","isHDREnabled","onChange","toggleHDR","isFloorVisible","toggleFloor"],"sources":["/Users/max/Documents/3DPrintprice-1/src/components/ChangeElementsComponent.vue"],"sourcesContent":["<template>\n  <div class=\"change\">\n    <v-btn variant=\"tonal\" size=\"small\" @click=\"changeHDR\">Change HDR</v-btn>\n    <v-btn variant=\"tonal\" size=\"small\" @click=\"changeFloor\">Change Floor</v-btn>\n    <v-btn variant=\"tonal\" size=\"small\" @click=\"changeSkybox\">Change Skybox</v-btn>\n    <div>\n    <!-- Existing color picker for skybox color -->\n    <span class =\"changecolor\">  \n      Choose Background Color  \n      <input type=\"color\" v-model=\"skyboxColorInput\" />\n    </span>\n\n    <!-- Sliders for skybox material properties -->\n    <v-slider\n      v-model=\"skyboxMetalness\"\n      @input=\"emitSkyboxPropertyChange('metalness', skyboxMetalness)\"\n      :min=\"0\"\n      :max=\"1\"\n      step=\"0.1\"\n      label=\"Metalness\"\n    ></v-slider>\n    <v-slider\n      v-model=\"skyboxRoughness\"\n      @input=\"emitSkyboxPropertyChange('roughness', skyboxRoughness)\"\n      :min=\"0\"\n      :max=\"1\"\n      step=\"0.1\"\n      label=\"Roughness\"\n    ></v-slider>\n    <v-slider\n      v-model=\"skyboxClearcoat\"\n      @input=\"emitSkyboxPropertyChange('clearcoat', skyboxClearcoat)\"\n      :min=\"0\"\n      :max=\"1\"\n      step=\"0.1\"\n      label=\"Clearcoat\"\n    ></v-slider>\n    <v-slider\n      v-model=\"skyboxClearcoatRoughness\"\n      @input=\"emitSkyboxPropertyChange('clearcoatRoughness', skyboxClearcoaRoughness)\"\n      :min=\"0\"\n      :max=\"1\"\n      step=\"0.1\"\n      label=\"Clearcoat Roughness\"\n    ></v-slider><v-slider\n      v-model=\"skyboxReflectivity\"\n      @input=\"emitSkyboxPropertyChange('reflectivity', skyboxReflectivity)\"\n      :min=\"0\"\n      :max=\"1\"\n      step=\"0.1\"\n      label=\"Reflectivity\"\n    ></v-slider>\n  </div>\n\n<div>\n    <!-- Input field for the hexadecimal color value of the floor -->\n    <span class =\"changecolor\">  Choose Floor Color <input type=\"color\" v-model=\"floorColorInput\" />\n    <!-- <v-btn variant=\"tonal\" size=\"small\" @click=\"changeFloorColor\">Change Floor Color</v-btn> -->\n  </span>\n</div>\n\n<v-row>\n    <v-col cols=\"12\" sm=\"6\">\n      <v-checkbox\n        v-model=\"isHDREnabled\"\n        :label=\"'Enable HDR'\"\n        @change=\"toggleHDR\"\n      ></v-checkbox>\n    </v-col>\n    <v-col cols=\"12\" sm=\"6\">\n      <v-checkbox\n        v-model=\"isFloorVisible\"\n        :label=\"'Show Floor'\"\n        @change=\"toggleFloor\"\n      ></v-checkbox>\n    </v-col>\n  </v-row>\n\n</div>\n</template>\n\n\n<script>\nexport default {\n  name: 'ChangeElementsComponent',\n  data() {\n    return {\n      showColorPicker: false,\n      skyboxColorInput: '#333333',\n      floorColorInput: '#333333', // Add a data property for floor color\n      floors: ['pinkfloor1.glb', 'pinkfloor2.glb', 'bathroomfloor.glb', 'scififloor.glb'],\n      currentFloorIndex: 0,\n      isHDREnabled: true,\n      isFloorVisible: true,\n      skyboxMetalness: 0.5, // Default value or initial value\n      skyboxRoughness: 0.3,\n      skyboxClearcoat: 0.9,\n      skyboxClearcoatRoughness: 0.2,\n      skyboxReflectivity: 0.5,\n    };\n  },\n  methods: {\n\n    emitSkyboxPropertyChange(property, value) {\n    this.$emit('changeSkyboxProperty', { property, value });\n    console.log('emitted properties skybox')\n  },\n\n    toggleHDR() {\n      this.$emit('toggle-hdr', this.isHDREnabled);\n    },\n    toggleFloor() {\n      this.$emit('toggle-floor', this.isFloorVisible);\n    },\n\n    changeHDR() {\n      this.$emit('changeHdr');\n    },\n    changeFloor() {\n// Update the current floor index\nthis.currentFloorIndex = (this.currentFloorIndex + 1) % this.floors.length;\n// Emit the changeFloor event with the selected floor identifier\nthis.$emit('changeFloor', this.floors[this.currentFloorIndex]);\n},\n\nchangeFloorType() {\n  // Emit the changeFloor event when the button is clicked\n  this.$emit('changeFloor');\n},\n    changeSkybox() {\n      this.$emit('changeSkybox');\n    },\n    // No changes needed here, continue emitting the color change event\n  // Emit the changeSkyboxColor event when the button is clicked\n  changeSkyboxColor() {\n  // Get the color value from the input field (skyboxColorInput)\n  const colorHex = this.skyboxColorInput || \"#e8e8e8\"; // Use the input value or default to black\n\n  // Emit the changeSkyboxColor event with the selected color\n  this.$emit(\"changeSkyboxColor\", colorHex);\n},\n\n// Emit the changeFloorColor event when the button is clicked\n},\nwatch: {\n  floorColorInput(newColor) {\n    if (/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(newColor)) {\n      // Valid hex code\n      this.$emit(\"changeFloorColor\", newColor);\n    } else {\n      console.warn('Invalid floor color hex:', newColor);\n    }\n  },\n\n  skyboxColorInput(newValue) {\n      this.$emit('changeSkyboxColor', newValue); // Automatically emit color change for skybox\n    },\n},\n  };\n</script>\n\n<style>\n.change{\nalign-content: space-evenly;\n}\n.v-btn {\nmargin: 0.5rem;\n}\n\n.changecolor {\n  padding: 1em;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAQ;;EAMXA,KAAK,EAAE;AAAa;;EAiDpBA,KAAK,EAAE;AAAa;;;;;;;uBAvD5BC,mBAAA,CA6EI,OA7EJC,UA6EI,GA5EFC,YAAA,CAAyEC,gBAAA;IAAlEC,OAAO,EAAC,OAAO;IAACC,IAAI,EAAC,OAAO;IAAEC,OAAK,EAAEC,QAAA,CAAAC;;sBAAW,MAAU,C,iBAAV,YAAU,E;;kCACjEN,YAAA,CAA6EC,gBAAA;IAAtEC,OAAO,EAAC,OAAO;IAACC,IAAI,EAAC,OAAO;IAAEC,OAAK,EAAEC,QAAA,CAAAE;;sBAAa,MAAY,C,iBAAZ,cAAY,E;;kCACrEP,YAAA,CAA+EC,gBAAA;IAAxEC,OAAO,EAAC,OAAO;IAACC,IAAI,EAAC,OAAO;IAAEC,OAAK,EAAEC,QAAA,CAAAG;;sBAAc,MAAa,C,iBAAb,eAAa,E;;kCACvEC,mBAAA,CA+CI,cA9CJC,mBAAA,4CAA+C,EAC/CD,mBAAA,CAGO,QAHPE,UAGO,G,iBAHoB,2BAEzB,G,gBAAAF,mBAAA,CAAiD;IAA1CG,IAAI,EAAC,OAAO;+DAAUC,KAAA,CAAAC,gBAAgB,GAAAC,MAAA;iDAAhBF,KAAA,CAAAC,gBAAgB,E,KAG/CJ,mBAAA,4CAA+C,EAC/CV,YAAA,CAOYgB,mBAAA;gBANDH,KAAA,CAAAI,eAAe;+DAAfJ,KAAA,CAAAI,eAAe,GAAAF,MAAA;IACvBG,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAJ,MAAA,IAAEV,QAAA,CAAAe,wBAAwB,cAAcP,KAAA,CAAAI,eAAe;IAC5DI,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,CAAC;IACPC,IAAI,EAAC,KAAK;IACVC,KAAK,EAAC;2CAERxB,YAAA,CAOYgB,mBAAA;gBANDH,KAAA,CAAAY,eAAe;+DAAfZ,KAAA,CAAAY,eAAe,GAAAV,MAAA;IACvBG,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAJ,MAAA,IAAEV,QAAA,CAAAe,wBAAwB,cAAcP,KAAA,CAAAY,eAAe;IAC5DJ,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,CAAC;IACPC,IAAI,EAAC,KAAK;IACVC,KAAK,EAAC;2CAERxB,YAAA,CAOYgB,mBAAA;gBANDH,KAAA,CAAAa,eAAe;+DAAfb,KAAA,CAAAa,eAAe,GAAAX,MAAA;IACvBG,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAJ,MAAA,IAAEV,QAAA,CAAAe,wBAAwB,cAAcP,KAAA,CAAAa,eAAe;IAC5DL,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,CAAC;IACPC,IAAI,EAAC,KAAK;IACVC,KAAK,EAAC;2CAERxB,YAAA,CAOYgB,mBAAA;gBANDH,KAAA,CAAAc,wBAAwB;+DAAxBd,KAAA,CAAAc,wBAAwB,GAAAZ,MAAA;IAChCG,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAJ,MAAA,IAAEV,QAAA,CAAAe,wBAAwB,uBAAuBQ,IAAA,CAAAC,uBAAuB;IAC7ER,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,CAAC;IACPC,IAAI,EAAC,KAAK;IACVC,KAAK,EAAC;2CACIxB,YAAA,CAOAgB,mBAAA;gBANDH,KAAA,CAAAiB,kBAAkB;+DAAlBjB,KAAA,CAAAiB,kBAAkB,GAAAf,MAAA;IAC1BG,OAAK,EAAAC,MAAA,SAAAA,MAAA,OAAAJ,MAAA,IAAEV,QAAA,CAAAe,wBAAwB,iBAAiBP,KAAA,CAAAiB,kBAAkB;IAClET,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,CAAC;IACPC,IAAI,EAAC,KAAK;IACVC,KAAK,EAAC;6CAIZf,mBAAA,CAKM,cAJFC,mBAAA,8DAAiE,EACjED,mBAAA,CAEK,QAFLsB,UAEK,G,iBAFsB,sBAAqB,G,gBAAAtB,mBAAA,CAAgD;IAAzCG,IAAI,EAAC,OAAO;iEAAUC,KAAA,CAAAmB,eAAe,GAAAjB,MAAA;iDAAfF,KAAA,CAAAmB,eAAe,E,GAC5FtB,mBAAA,oGAAiG,C,KAIrGV,YAAA,CAeUiC,gBAAA;sBAdN,MAMQ,CANRjC,YAAA,CAMQkC,gBAAA;MANDC,IAAI,EAAC,IAAI;MAACC,EAAE,EAAC;;wBAClB,MAIc,CAJdpC,YAAA,CAIcqC,qBAAA;oBAHHxB,KAAA,CAAAyB,YAAY;qEAAZzB,KAAA,CAAAyB,YAAY,GAAAvB,MAAA;QACpBS,KAAK,EAAE,YAAY;QACnBe,QAAM,EAAElC,QAAA,CAAAmC;;;QAGbxC,YAAA,CAMQkC,gBAAA;MANDC,IAAI,EAAC,IAAI;MAACC,EAAE,EAAC;;wBAClB,MAIc,CAJdpC,YAAA,CAIcqC,qBAAA;oBAHHxB,KAAA,CAAA4B,cAAc;qEAAd5B,KAAA,CAAA4B,cAAc,GAAA1B,MAAA;QACtBS,KAAK,EAAE,YAAY;QACnBe,QAAM,EAAElC,QAAA,CAAAqC"},"metadata":{},"sourceType":"module","externalDependencies":[]}